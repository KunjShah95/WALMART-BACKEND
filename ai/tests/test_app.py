import json


def test_create_product(client, monkeypatch):
    # Mock design generation and Gemini API call
    monkeypatch.setattr("app.generate_design", lambda prompt: None)
    monkeypatch.setattr("app.save_design", lambda img, path: None)

    # Mock Gemini response
    class MockGeminiResponse:
        text = "This is a test sustainability narrative generated by Gemini 2.0-flash."

    monkeypatch.setattr(
        "app.gemini_model.generate_content",
        lambda prompt, generation_config=None: MockGeminiResponse(),
    )

    dummy_suppliers = [{"Manufacturer_Name": "EcoMaker1", "final_score": 0.9}]
    monkeypatch.setattr(
        "app.matcher.find_top_suppliers", lambda m, r, min_capacity: dummy_suppliers
    )

    response = client.post(
        "/create-product",
        json={
            "prompt": "Test design",
            "material": "Organic Cotton",
            "region": "Ahmedabad",
            "quantity": 0.5,
        },
    )
    assert response.status_code == 200
    data = json.loads(response.data)
    assert "image_url" in data
    assert "suppliers" in data and isinstance(data["suppliers"], list)
    assert "scorecard" in data and "co2_kg" in data["scorecard"]
    assert "narrative" in data
    assert data["status"] == "success"


def test_get_materials(client):
    response = client.get("/materials")
    assert response.status_code == 200
    data = json.loads(response.data)
    assert "materials" in data
    assert "count" in data
    assert data["status"] == "success"


def test_health_check(client):
    response = client.get("/health")
    assert response.status_code == 200
    data = json.loads(response.data)
    assert data["status"] == "healthy"
    assert "timestamp" in data
